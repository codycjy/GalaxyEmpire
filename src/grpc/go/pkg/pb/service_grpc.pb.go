// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: service.proto

package client

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GalaxyGrpcClient is the client API for GalaxyGrpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GalaxyGrpcClient interface {
	PingNode(ctx context.Context, in *NodePing, opts ...grpc.CallOption) (*NodePong, error)
	GetAllNodeStatus(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AllNodeStatus, error)
	ExcuteNodeCommand(ctx context.Context, in *ReqNodeCommand, opts ...grpc.CallOption) (*ResNodeCommand, error)
}

type galaxyGrpcClient struct {
	cc grpc.ClientConnInterface
}

func NewGalaxyGrpcClient(cc grpc.ClientConnInterface) GalaxyGrpcClient {
	return &galaxyGrpcClient{cc}
}

func (c *galaxyGrpcClient) PingNode(ctx context.Context, in *NodePing, opts ...grpc.CallOption) (*NodePong, error) {
	out := new(NodePong)
	err := c.cc.Invoke(ctx, "/GalaxyGrpc/pingNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *galaxyGrpcClient) GetAllNodeStatus(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AllNodeStatus, error) {
	out := new(AllNodeStatus)
	err := c.cc.Invoke(ctx, "/GalaxyGrpc/getAllNodeStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *galaxyGrpcClient) ExcuteNodeCommand(ctx context.Context, in *ReqNodeCommand, opts ...grpc.CallOption) (*ResNodeCommand, error) {
	out := new(ResNodeCommand)
	err := c.cc.Invoke(ctx, "/GalaxyGrpc/ExcuteNodeCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GalaxyGrpcServer is the server API for GalaxyGrpc service.
// All implementations must embed UnimplementedGalaxyGrpcServer
// for forward compatibility
type GalaxyGrpcServer interface {
	PingNode(context.Context, *NodePing) (*NodePong, error)
	GetAllNodeStatus(context.Context, *Empty) (*AllNodeStatus, error)
	ExcuteNodeCommand(context.Context, *ReqNodeCommand) (*ResNodeCommand, error)
	mustEmbedUnimplementedGalaxyGrpcServer()
}

// UnimplementedGalaxyGrpcServer must be embedded to have forward compatible implementations.
type UnimplementedGalaxyGrpcServer struct {
}

func (UnimplementedGalaxyGrpcServer) PingNode(context.Context, *NodePing) (*NodePong, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingNode not implemented")
}
func (UnimplementedGalaxyGrpcServer) GetAllNodeStatus(context.Context, *Empty) (*AllNodeStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllNodeStatus not implemented")
}
func (UnimplementedGalaxyGrpcServer) ExcuteNodeCommand(context.Context, *ReqNodeCommand) (*ResNodeCommand, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExcuteNodeCommand not implemented")
}
func (UnimplementedGalaxyGrpcServer) mustEmbedUnimplementedGalaxyGrpcServer() {}

// UnsafeGalaxyGrpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GalaxyGrpcServer will
// result in compilation errors.
type UnsafeGalaxyGrpcServer interface {
	mustEmbedUnimplementedGalaxyGrpcServer()
}

func RegisterGalaxyGrpcServer(s grpc.ServiceRegistrar, srv GalaxyGrpcServer) {
	s.RegisterService(&GalaxyGrpc_ServiceDesc, srv)
}

func _GalaxyGrpc_PingNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodePing)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GalaxyGrpcServer).PingNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GalaxyGrpc/pingNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GalaxyGrpcServer).PingNode(ctx, req.(*NodePing))
	}
	return interceptor(ctx, in, info, handler)
}

func _GalaxyGrpc_GetAllNodeStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GalaxyGrpcServer).GetAllNodeStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GalaxyGrpc/getAllNodeStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GalaxyGrpcServer).GetAllNodeStatus(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GalaxyGrpc_ExcuteNodeCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqNodeCommand)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GalaxyGrpcServer).ExcuteNodeCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GalaxyGrpc/ExcuteNodeCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GalaxyGrpcServer).ExcuteNodeCommand(ctx, req.(*ReqNodeCommand))
	}
	return interceptor(ctx, in, info, handler)
}

// GalaxyGrpc_ServiceDesc is the grpc.ServiceDesc for GalaxyGrpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GalaxyGrpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "GalaxyGrpc",
	HandlerType: (*GalaxyGrpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "pingNode",
			Handler:    _GalaxyGrpc_PingNode_Handler,
		},
		{
			MethodName: "getAllNodeStatus",
			Handler:    _GalaxyGrpc_GetAllNodeStatus_Handler,
		},
		{
			MethodName: "ExcuteNodeCommand",
			Handler:    _GalaxyGrpc_ExcuteNodeCommand_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
